%{
	int yylex();
	void yyerror(const char* s);
	#include "Compiler/Compiler.h"
	#include <string>
	#include <vector>
	#include <iostream>
	#include "Compiler/Symtab.h"
	#include "Compiler/Expr.h"
	extern Symtab symtab;
	using namespace std;

	extern int yylineno;
	bool parsing_curve;

	#define YYERROR_VERBOSE 1

	void assertCouldBe(const Expr* exp, Expr::ValueType type) {
		if(!exp->couldBe(type)) {
			yyerror(("Expected '"+exp->txt+"' to be of type: '"+Expr::type_names.at(type)+"' but type is: '"+Expr::type_names.at(exp->type)+"'").c_str());
		}
	}
%}

%code requires {
	#include "Compiler/Expr.h"
	void yyerror(const char* err);
	void assertCouldBe(const Expr* exp, Expr::ValueType type);
}


%union{
//lexer fields:
	std::string* text;
//semantic properties:
	std::vector<std::string>* symbol_list;
	std::vector<std::string>* param_list;
	std::vector<Expr*>* expr_list;
	Expr* expr;
	std::tuple<std::string, std::string, std::string>* range_spec;
	std::tuple<std::string, std::string>* const_decl;
	std::tuple<std::string, std::string>* domain_spec;
	bool boolean;
};

%token CURVE SHOW FUNC FOR IN IMPORT LET SPEED WAIT
%token COMMA AND_ALSO EQ

%left <text> BINOP
%left MINUS
%right UMINUS
%left LPAREN RPAREN LBRACE RBRACE DOT
%token <text> NUMBER ID FILENAME
%token <symbol_list> COLON
%type <range_spec> RangeSpec
%type <const_decl> AssignDecl
%type <text> Statment FuncCall FuncCallTail OptPeriod
%type <expr_list> ExpList
%type <expr> Exp
%type <symbol_list> Statments
%type <param_list> FormalsSpec FormalsList FormalsListTail
%type <boolean> OptWait
%type <domain_spec> OptDomain
%%

Program: Delcerations;
Delcerations: Delcerations Declaration | Declaration;

DeclarationHead: CURVE {parsing_curve = true;}
	| FUNC {parsing_curve = false;}
	;

Declaration: DeclarationHead ID FormalsSpec COLON {
		if(parsing_curve)
			$3->insert($3->begin(), "t");
		symtab.defineFunction(*$2, *$3, {
			*$2,
			yylineno,
			*$3,
		});
		$4 = new vector<string>(symtab.getVariables());
	} Statments {
		string decl_rvalue;
		vector<string> params = *$4;
		string params_format = symtab.getVariablesFormat(params);
		int num_statments = $6->size();
		if($6->size() > 1){
			//define an anon function,
			//	for each i (natural number input) given as it's fist paramter, it act's like the i'th statment:
			//lvalue:
			std::string aggregate_sym = symtab.getAnonSymbol();//TODO: need to add k_0 or statment split variable here.
			symtab.defineAnonFunc(aggregate_sym, std::vector<std::string>({"k"}));
			
			params.push_back("k");
			std::string anon_params_format = symtab.getVariablesFormat(params);
			latex_buf.clear();
			latex_buf += symtab.getSymInfo(aggregate_sym).getDsmExp() + anon_params_format + "=";
			//rvalue:
			int counter = 1;
			latex_buf += "\\left\\{";
			for(std::string& symbol : *$6){
				if(symbol != (*$6)[0])
					latex_buf += ",";
				latex_buf += "k=" + std::to_string(counter++) + ":";//TODO: change k_0 to anon symbol. Otherwise there are issues with nested multiple statments!
				latex_buf += symtab.getSymInfo(symbol).getDsmExp() + params_format;
			}
			latex_buf += "\\right\\}";
			gen.addLatex(latex_buf);

			//rvalue function that uses the anon function:
			decl_rvalue = symtab.getSymInfo(aggregate_sym).getDsmExp()+
					symtab.getVariablesFormat(params, {
						{"t","L_{split}\\left(t, "+to_string(num_statments)+"\\right)"},
						{"k","L_{index}\\left(t, "+to_string(num_statments)+"\\right)"}
					});//here replace 't' with L_split and 'k_0' with L_indx
			symtab.closeScope();//this closes the scope opened by the anon function.
		} else {
			decl_rvalue = symtab.getSymInfo((*$6)[0]).getDsmExp() + params_format;
		}
		gen.addLatex(symtab.getSymInfo(*$2).getDsmExp() + params_format + "=" + decl_rvalue);
		symtab.closeScope();
		delete $2; delete $4; delete $6;
	}
	| SHOW {symtab.openScope({"t"});} Exp OptDomain {
		gen.addLatex($3->txt, false, $4);
		symtab.closeScope();
		delete $3; delete $4;
	}
	| IMPORT FILENAME {
		// string filename = *$2;
		// if(filename.size() < 3)
		// 	throw runtime_error("expected \"<filename>\" name after 'import' command.");
		// //remove '"' from filename start and ending:
		// filename = filename.substr(1, filename.size()-2);
		// //add "..\"	to filename:
		// filename = "..\\" + filename;
		// //start reading from new file:
		// // cout << "chaning import src to: " << filename << endl;//DB
		// // imported_files.insert(filename);
		// InputManager::getInstance().pushInputFile(filename);
		delete $2;
	};
	| VarDecl
	;

OptDomain: {
		$$ = new std::tuple<std::string, std::string>({"0", "1"});
	}
	| IN Exp COMMA Exp {
		$$ = new std::tuple<std::string, std::string>({$2->txt, $4->txt});
		delete $2; delete $4;
	}
	;

VarDecl:
	LET ID EQ Exp {
		symtab.defineGlobalValue(*$2, {*$2, yylineno});
		gen.addLatex(symtab.getSymInfo(*$2).getDsmExp()+"="+$4->txt);
		delete $2;
	}
	| LET AssignDecl IN RangeSpec OptPeriod OptWait{
		symtab.defineGlobalValue(get<0>(*$2), {get<0>(*$2), yylineno});
		gen.addSlider(
			symtab.getSymInfo(get<0>(*$2)).getDsmExp(),
			get<1>(*$2),
			get<0>(*$4),
			get<1>(*$4),
			get<2>(*$4),
			*$5,
			!$6
		);
		delete $2; delete $4; delete $5;
	}
	;

OptPeriod: {$$ = new string("1");}
	| SPEED NUMBER {$$ = $2;}
	;

OptWait: {$$ = false;}
	| WAIT {$$ = true;}
	;

AssignDecl: ID {$$ = new tuple<string, string>(*$1, "0"); delete $1;}
	| ID EQ NUMBER {$$ = new tuple<string, string>(*$1, *$3); delete $1; delete $3;}
	;

RangeSpec: {$$ = new tuple<string, string, string>("0", "1", "0");}//empty: all defaults
	| Exp {
		$$ = new tuple<string, string, string>($1->txt, "1" , "0");
		delete $1;
	}
	| Exp COMMA Exp {
		$$ = new tuple<string, string, string>($1->txt, $3->txt, "0");
		delete $1; delete $3;
	}
	| Exp COMMA Exp COMMA Exp {
		$$ = new tuple<string, string, string>($1->txt, $3->txt, $5->txt);
		delete $1; delete $3; delete $5;
	}
	;


FormalsSpec: LPAREN FormalsList RPAREN {$$ = $2;}
	| {$$ = new std::vector<std::string>();};
FormalsList: FormalsListTail {$$ = $1;}
	| {$$ = new std::vector<std::string>();};
FormalsListTail: ID COMMA FormalsListTail {$3->insert($3->begin(), *$1); delete $1; $$ = $3;}
	| ID {$$ = new std::vector<std::string>({*$1}); delete $1;};

Statments: Statments AND_ALSO Statment {
		if(!parsing_curve){
			yyerror("consecutive statments are only allowed in 'curve' declarations");
		}
		$1->push_back(*$3);
		$$ = $1;
		delete $3;
	}
	| Statment {$$ = new std::vector<std::string>({*$1}); delete $1;}
	;

Statment: Exp {
		$$ = new string(symtab.getAnonSymbol());
		gen.addLatex(symtab.defineAnonFunc(*$$) + symtab.getLocalsInFormat() + " = " + $1->txt);
		symtab.closeScope();
	}
	| FOR ID IN Exp COLON {
		if(!parsing_curve){
			yyerror("loops are only allowed in 'curve' declarations");
		}
		$5 = new vector<string>({symtab.getAnonSymbol()});
		//open scope and inside - declare ID:
		symtab.defineAnonFunc((*$5)[0], std::vector<std::string>({*$2}));
	}
	Statment {
		$$ =  new string((*$5)[0]);
		latex_buf.clear();
		//output anon func definition in format 'func(x, y, ...)', 'ID' is not a parameter.
		latex_buf += symtab.getSymInfo(*$$).getDsmExp()+symtab.getLocalsInFormat({}, {*$2})+" = ";
		
		//output value of our anon func: a call to the 'Statment' anon func,
		//	it's 't' parameter is replaced with 'L_split' and it's 'ID' parameter is replaced with 'L_index':
		latex_buf += symtab.getSymInfo(*$7).getDsmExp()+symtab.getLocalsInFormat({
			{"t","L_{split}\\left(t, "+$4->txt+"\\right)"},
			{*$2,"L_{index}\\left(t, "+$4->txt+"\\right)"},
		});
		gen.addLatex(latex_buf);
		symtab.closeScope();
		delete $2; delete $4; delete $5; delete $7;
	}
	;

Exp:
	NUMBER {$$ = Expr::locxp($1, Expr::Int);}
	| ID {$$ = new Expr(symtab.getSymInfo(*$1).getDsmExp(), Expr::Any); delete $1;}
	| FuncCall {$$ = Expr::locxp($1, Expr::Any);}
	| LPAREN Exp COMMA Exp RPAREN {$$ = new Expr(string("\\left("+$2->txt+" , "+$4->txt+"\\right)"), Expr::Vector); delete $2; delete $4;}
	| LBRACE ExpList RBRACE {$$ = new Expr(string("\\left[" + Expr::stringify_ls($2) + "\\right]"), Expr::List);}
	| LPAREN Exp RPAREN {$$ = $2; $$->txt = "\\left("+$$->txt+"\\right)";}
	| Exp BINOP Exp {
		$$ = new Expr(string($1->txt+" "+*$2+" "+$3->txt), Expr::Any);
		delete $1; delete $2; delete $3;
	}
	| Exp LBRACE Exp RBRACE {
		assertCouldBe($1, Expr::List);
		$$ = new Expr($1->txt, Expr::Any);
		$$->txt += "\\left["+$3->txt+"\\right]";
		delete $1; delete $3;
	}
	| Exp MINUS Exp {
		$$ = new Expr($1->txt+"-"+$3->txt, Expr::Any);
		delete $1; delete $3;
	}
	| MINUS Exp {$$ = $2; $$->txt = "-"+$$->txt;} %prec UMINUS
	| Exp DOT ID {
		if(set<string>({"x", "y", "length"}).count(*$3) == 0){
			yyerror(string("no such property '"+*$3+"'").c_str());
		}
		$$ = new Expr($1->txt, Expr::Any);
		$$->txt += '.';
		if(*$3 == "length") {
			assertCouldBe($1, Expr::List);
			$$->txt += "\\operatorname{"+*$3+"}";
			$$->type = Expr::Int;
		} else {
			assertCouldBe($1, Expr::Vector);
			$$->txt += *$3;
			$$->type = Expr::Number;
		}
		delete $1; delete $3;
	}
	;

	FuncCall: ID FuncCallTail {
		$$ = new string(symtab.getSymInfo(*$1).getDsmExp()+*$2);
		delete $1;
		delete $2;
	};

FuncCallTail: LPAREN ExpList RPAREN {$$ = new string("\\left("+Expr::stringify_ls($2)+"\\right)");};

ExpList: Exp COMMA ExpList {$$ = $3; $$->insert($$->begin(), $1);}
	| Exp {$$ = new vector<Expr*>({$1});}
	| {$$ = new vector<Expr*>();}
	;
%%

