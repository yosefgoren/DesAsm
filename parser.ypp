%{
	int yylex();
	void yyerror(const char* s);
	#include "utility.h"
	#include <string>
	#include <vector>
	#include <iostream>
	#include "Symtab.h"
	Symtab symtab;
	using namespace std;

	extern int yylineno;
	bool parsing_curve;

	#define YYERROR_VERBOSE 1
%}

%union{
//lexer fields:
	std::string* text;
//semantic properties:
	std::vector<std::string>* symbol_list;
	std::vector<std::string>* param_list;
	bool boolean;
};

%token CURVE DISPLAY FUNC FOR IN
%token COMMA AND_ALSO
%token LPAREN RPAREN LBRACE RBRACE

%left <text> BINOP
%token <text> NUMBER ID COLON
%type <text> Statment Exp ExpList FuncCall FuncCallTail
%type <symbol_list> Statments
%type <param_list> FormalsSpec FormalsList FormalsListTail

%%

Program: Delcerations;
Delcerations: Delcerations Declaration | Declaration;

DeclarationHead: CURVE {parsing_curve = true;} | FUNC {parsing_curve = false;};

Declaration: DeclarationHead ID FormalsSpec COLON {
		if(parsing_curve)
			$3->insert($3->begin(), "t");
		symtab.defineFunction(*$2, *$3);
		$4 = new string(symtab.getLocalsInFormat());
	} Statments {
		std::string decl_rvalue;
		if($6->size() > 1){
			int counter = 1;
			std::string aggregate_sym = symtab.getAnonSymbol();//TODO: need to add k_0 or statment split variable here.
			symtab.defineAnonFunc(aggregate_sym, std::vector<std::string>({"k_0"}));
			int chop_size = std::string("\\left(").size();
			std::string anon_params_format = "\\left(k_0,"+$4->substr(chop_size, $4->size()-chop_size);
			cout << symtab.getSymInfo(aggregate_sym).getDsmExp() << anon_params_format <<  "=";
			
			cout << "\\left\\{";
			for(std::string& symbol : *$6){
				if(symbol != (*$6)[0])
					cout << ",";
				cout << "k_0=" << counter++ << ":";//TODO: change k_0 to anon symbol. Otherwise there are issues with nested multiple statments!
				// cout << "declaring symbol: " << symbol << endl;
				// cout << symtab.getSymInfo(*$2).getDsmExp() << counter++ << *$4;
				cout << symtab.getSymInfo(symbol).getDsmExp() << *$4;
			}
			cout << "\\right\\}" << endl;
			
			decl_rvalue = symtab.getSymInfo(aggregate_sym).getDsmExp() + *$4;//here replace 't' with L_split and 'k_0' with L_indx
		} else {
			decl_rvalue = symtab.getSymInfo((*$6)[0]).getDsmExp() + *$4;
		}
		cout << symtab.getSymInfo(*$2).getDsmExp() << *$4 <<  "=" << decl_rvalue << endl;
		symtab.closeScope();
		delete $2; delete $4; delete $6;
	};

FormalsSpec: LPAREN FormalsList RPAREN {$$ = $2;}
	| {$$ = new std::vector<std::string>();};
FormalsList: FormalsListTail {$$ = $1;}
	| {$$ = new std::vector<std::string>();};
FormalsListTail: ID COMMA FormalsListTail {$3->insert($3->begin(), *$1); delete $1; $$ = $3;}
	| ID {$$ = new std::vector<std::string>({*$1}); delete $1;};

Statments: Statments AND_ALSO Statment {
		// std::cout << "got new statment symbol: " << *$3 << endl;
		if(!parsing_curve){
			yyerror("consecutive statments are only allowed in 'curve' declarations");
		}
		$1->push_back(*$3);
		$$ = $1;
		delete $3;
	}
	| Statment {$$ = new std::vector<std::string>({*$1}); delete $1;}
	;

Statment: Exp {
		$$ = new string(symtab.getAnonSymbol());
		cout << symtab.defineAnonFunc(*$$)+symtab.getLocalsInFormat()+" = "+*$1;
		cout << endl;
		symtab.closeScope();
	}
	| FOR ID IN Exp COLON {
		if(!parsing_curve){
			yyerror("loops are only allowed in 'curve' declarations");
		}
		$5 = new string(symtab.getAnonSymbol());
		//open scope and inside - declare ID:
		symtab.defineAnonFunc(*$5, std::vector<std::string>({*$2}));
	}
	Statment {
		$$ = $5;
		//output anon func definition in format 'func(x, y, ...)', 'ID' is not a parameter.
		cout << symtab.getSymInfo(*$$).getDsmExp()+symtab.getLocalsInFormat({}, {*$2})+" = ";
		
		//output value of our anon func: a call to the 'Statment' anon func,
		//	it's 't' parameter is replaced with 'L_split' and it's 'ID' parameter is replaced with 'L_index':
		cout << symtab.getSymInfo(*$7).getDsmExp()+symtab.getLocalsInFormat({
			{"t","L_{split}\\left(t, "+*$4+"\\right)"},
			{*$2,"L_{index}\\left(t, "+*$4+"\\right)"},
		});
		cout << endl;
		symtab.closeScope();
		delete $2; delete $4; delete $7;
	}
	;

Exp: NUMBER {$$ = $1;}
	| LPAREN Exp COMMA Exp RPAREN {$$ = new string("\\left("+*$2+" , "+*$4+"\\right)"); delete $2; delete $4;}
	| LBRACE Exp COMMA Exp COMMA Exp RBRACE
		{$$ = new string("\\left["+*$2+" , "+*$4+" , "+*$6+"\\right]"); delete $2; delete $4; delete $6;}
	| LPAREN Exp RPAREN {$$ = $2; *$$ = "\\left("+*$$+"\\right)";}
	| ID {$$ = $1; *$$ = symtab.getSymInfo(*$$).getDsmExp();}
	| Exp BINOP Exp {$$ = new string(*$1+" "+*$2+" "+*$3); delete $1; delete $2; delete $3;}
	| FuncCall {$$ = $1;}
	| ID LBRACE NUMBER RBRACE {$$ = $1; *$$ = symtab.getSymInfo(*$$).getDsmExp()+"\\left["+*$3+"\\right]"; delete $3;}
	;

FuncCall: ID FuncCallTail {$$ = new string(symtab.getSymInfo(*$1).getDsmExp()+*$2); delete $1; delete $2;};
FuncCallTail: LPAREN ExpList RPAREN {$$ = $2; *$$ = "\\left("+*$$+"\\right)";};

ExpList: Exp COMMA ExpList {$$ = $1; *$$ += " , "+*$3; delete $3;}
	| Exp {$$ = $1;}
	| {$$ = new string(" ");};
%%

