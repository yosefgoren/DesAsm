%{
	int yylex();
	void yyerror(const char* s);
	#include "utility.h"
	#include <string>
	#include <vector>
	#include <iostream>
	#include "Symtab.h"
	Symtab symtab;
	using namespace std;

	extern int yylineno;

	#define YYERROR_VERBOSE 1
	#define YYDEBUG 1
	extern int yydebug;
%}

%union{
//lexer fields:
	std::string* text;
//semantic properties:
	std::vector<std::string>* param_list;
};

%token CURVE DISPLAY FOR IN
%token COMMA
%token LPAREN RPAREN LBRACE RBRACE
 
%left <text> BINOP
%token <text> NUMBER ID COLON
%type <text> Statment Exp ExpList FuncCall FuncCallTail
%type <param_list> FormalsSpec FormalsList FormalsListTail

%%
Program: Delcerations;
Delcerations: Delcerations Declaration | Declaration;

LparenPrint: LPAREN {cout << "\\left(";};
RparenPrint: RPAREN {cout << "\\right)";};

Declaration: CURVE ID FormalsSpec COLON {
		symtab.defineFunction(*$2, *$3);
		$4 = new string(symtab.getLocalsInFormat());
	} Statment {
		cout << symtab.getSymInfo(*$2).getDsmExp() << *$4;
		cout << " = " << symtab.getSymInfo(*$6).getDsmExp() << *$4;
		cout << endl;
		symtab.closeScope();
		delete $2; delete $4; delete $6;
	};

FormalsSpec: LparenPrint FormalsList RparenPrint {$$ = $2; $$->push_back("t");}
	| {$$ = new std::vector<std::string>(); $$->push_back("t");};
FormalsList: FormalsListTail {$$ = $1;}
	| {$$ = new std::vector<std::string>();};
FormalsListTail: ID COMMA FormalsListTail {$3->push_back(*$1); delete $1; $$ = $3;}
	| ID {$$ = new std::vector<std::string>(); $$->push_back(*$1); delete $1;};

Statment: Exp {
		$$ = new string(symtab.getAnonSymbol());
		cout << symtab.defineAnonFunc(*$$)+symtab.getLocalsInFormat()+" = "+*$1;
		cout << endl;
		symtab.closeScope();
	}
	| FOR ID IN NUMBER COLON {
		$5 = new string(symtab.getAnonSymbol());
		//open scope and inside - declare ID:
		symtab.defineAnonFunc(*$5, std::vector<std::string>({*$2}));
	}
	Statment {
		$$ = $5;
		//output anon func definition in format 'func(x, y, ...)', 'ID' is not a parameter.
		cout << symtab.getSymInfo(*$$).getDsmExp()+symtab.getLocalsInFormat({}, {*$2})+" = ";
		
		//output value of our anon func: a call to the 'Statment' anon func,
		//	it's 't' parameter is replaced with 'L_split' and it's 'ID' parameter is replaced with 'L_index':
		cout << symtab.getSymInfo(*$7).getDsmExp()+symtab.getLocalsInFormat({
			{"t","L_{split}\\left(t, "+*$4+"\\right)"},
			{*$2,"L_{index}\\left(t, "+*$4+"\\right)"},
		});
		cout << endl;
		symtab.closeScope();
		delete $2; delete $4; delete $7;
	}
	;

Exp: NUMBER {$$ = $1;}
	| LPAREN Exp COMMA Exp RPAREN {$$ = new string("\\left("+*$2+" , "+*$4+"\\right)"); delete $2; delete $4;}
	| LPAREN Exp RPAREN {$$ = $2; *$$ = "\\left("+*$$+"\\right)";}
	| ID {$$ = $1; $$ = new string(symtab.getSymInfo(*$$).getDsmExp());}
	| Exp BINOP Exp {$$ = new string(*$1+" "+*$2+" "+*$3); delete $1; delete $2; delete $3;}
	| FuncCall {$$ = $1;};

FuncCall: ID FuncCallTail {$$ = new string(symtab.getSymInfo(*$1).getDsmExp()+*$2); delete $1; delete $2;};
FuncCallTail: LPAREN ExpList RPAREN {$$ = $2; *$$ = "\\left("+*$$+"\\right)";};

ExpList: Exp COMMA ExpList {$$ = $1; *$$ += " , "+*$3; delete $3;}
	| Exp {$$ = $1;}
	| {$$ = new string(" ");};
%%

void yyerror(const char* s){
	printf("\nsyntax error. line %d\n", yylineno);
	exit(1);
}

int main(){
	try{
		Symtab symtab = Symtab();
		yyparse();
	} catch(const SemanticError& e){
		cout << "\nline " << yylineno << ": " << e.errorMsg() << endl;
	}
	cout << "done!" << endl;
	return 0;
}